# -*- coding: utf-8 -*-
"""Fashion MNIST Simple Autoencoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c4IKyAdLkkWnMcOTmgDDj6TF6ulmMox6
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Input, Flatten, Dense, Reshape
from keras.optimizers import Adam
import numpy as np
import matplotlib.pyplot as plt
import time
import random

(xTrain, yTrain), (xTest, yTest) = tf.keras.datasets.fashion_mnist.load_data()
print("Train data shape:\t", xTrain.shape, "\nTest data shape:\t", xTest.shape)
plt.imshow(xTrain[random.randint(0, xTrain.shape[0])], cmap='gray')

"""# Parameters"""

epochs = 16
batchSize = 32
learningRate = 0.001
decay = 1e-6

"""# Preprocessing 
dividing all images by 255
"""

xTrain = xTrain / 255.0
xTest = xTest / 255.0

"""# Building model"""

# Encoder
encoderInput = Input(shape=(28, 28, 1))         # 784 features
x = Flatten()(encoderInput)
x = Dense(128, activation='relu')(x)            # 128 features
encoderOutput = Dense(64, activation='relu')(x) # 64 features
encoder = keras.Model(encoderInput, encoderOutput, name="encoder")     # encoder model

# Decoder
decoderInput = Dense(128, activation='relu')(encoderOutput)
x = Dense(28*28*1, activation='relu')(decoderInput)
decoderOutput = Reshape((28, 28, 1))(x)

# Autoencoder
autoencoder = keras.Model(encoderInput, decoderOutput, name="autoencoder")
autoencoder.summary()

"""# Training model"""

optimizer = Adam(learningRate, decay)
autoencoder.compile(optimizer, loss="mse")
autoencoder.fit(xTrain, xTrain, epochs=epochs, batch_size=batchSize, validation_split=0.1)

"""# Testing model"""

def testModel(image):
  figure = plt.figure(figsize=(28, 28))
  rows, columns = 1, 2

  figure.add_subplot(rows, columns, 1)
  plt.imshow(image, cmap="gray")     # showing original image
  plt.axis('off') 
  plt.title("Original image", fontsize=40) 

  # Autoencoder output image
  image = image.reshape(-1, 28, 28, 1)
  predection = autoencoder.predict([image])
  #predection = predection * 255

  # Showing output image
  figure.add_subplot(rows, columns, 2)
  plt.imshow(predection[0].reshape(28, 28), cmap="gray")
  plt.axis('off') 
  plt.title("Generated image", fontsize=40)

for i in range(50):
  testModel(xTest[random.randint(0, xTest.shape[0])])